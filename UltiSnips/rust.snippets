snippet tests "test case module" !b
#[cfg(test)]
mod tests {
	use super::*;
	$0
}
endsnippet

snippet test "test case" !b
#[test]
fn ${1:TEST_NAME}() {$0}
endsnippet

snippet todo "todo" !w
// TODO: ${1:msg} - MCL - `date +%Y-%m-%d`
endsnippet

snippet fixme "fixme" !w
// FIXME: ${1:msg} - MCL - `date +%Y-%m-%d`
endsnippet

snippet der "derive" !b
#[derive(Debug, Clone$0)]
endsnippet

snippet disp "display" !b
use std::fmt;

impl fmt::Display for ${1:STRUCT} {
	fn fmt(&self, f: &mut fmt::Formatter<'_>) -> fmt::Result {
		write!(f, "({}, {})", self.x, self.y)$0
	}
}
endsnippet

snippet fromstr "from str" !b
use std::str::FromStr;

impl FromStr for ${1:TYPE} {
	type Err = ${2:ERROR};

	fn from_str(s: &str) -> Result<Self> {
		//...
	}
}

endsnippet

snippet cerr "crate error import" !b
use crate::error::{${1:ERROR}, Result};
endsnippet

snippet cons "default constructor" !b
pub fn new() -> Self {
	$0
}
endsnippet

snippet intoerr "From Error" !b
impl From<${1:ERROR}> for ${2:ERROR_ENUM} {
	fn from(err: ${3:$1}) -> ${4:$2} {
		${5:$2}::${6:ENUM_VAL}(err)
	}
}
endsnippet

snippet err "Standard error definitions" !b
pub type Result<T> = std::result::Result<T, ${14:$1}>;

/// ${2:$1} enumerates all possible errors returned by this library
#[derive(Debug)]
pub enum ${1:ERROR_ENUM} {
	MyError(),
	MyErrorWithMessage(String),

	/// Represents all other cases of `std::io::Error`
	IOError(std::io::Error),
}

impl std::error::Error for ${3:$1} {
	fn source(&self) -> Option<&(dyn std::error::Error + 'static)> {
		match *self {
			${4:$1}::MyError() => None,
			${5:$1}::MyErrorWithMessage(_) => None,
			${6:$1}::IOError(ref err) => Some(err),
		}
	}
}

impl std::fmt::Display for ${7:$1} {
	fn fmt(&self, f: &mut std::fmt::Formatter) -> std::fmt::Result {
		match *self {
			${8:$1}::MyError() => {
				write!(f, "some error message")
			}
			${9:$1}::MyErrorWithMessage(ref msg) => {
				write!(f, "some error with msg '{}'", msg)
			},
			${10:$1}::IOError(ref err) => err.fmt(f),
		}
	}
}

impl From<std::io::Error> for ${11:$1} {
	fn from(err: std::io::Error) -> ${12:$1} {
		${13:$1}::IOError(err)
	}
}$0
endsnippet
